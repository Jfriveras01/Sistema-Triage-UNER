/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.miapp.triage.gui;

import com.miapp.triage.metodoscsv.ltriage;
import com.miapp.triage.triage.Triage;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Fran
 */
public class Moverpaciente extends javax.swing.JFrame {

    /**
     * Creates new form Moverpaciente
     */
    String archivo = "src\\main\\java\\com\\miapp\\triage\\csv\\triage.csv";
    
    private ltriage gestorTriage;
    ArrayList<Triage> triage;
    public Moverpaciente()  {
        initComponents();
        this.triage = new ArrayList<Triage>();
        gestorTriage = new ltriage();
        jTextField1.setEditable(false);
        jTextField2.setEditable(false);
        try {
            cargarPacientesDesdeArchivo(archivo);
            
            jComboBox1.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                cargarInformacionPaciente();
            }
        });
            
           jTextField2.getDocument().addDocumentListener(new DocumentListener() {
            public void actionPerformed(ActionEvent e) {
                jTextField2ActionPerformed(e);
            }

                @Override
                public void insertUpdate(DocumentEvent e) {
                    actualizarComboBox();
                }

                @Override
                public void removeUpdate(DocumentEvent e) {
                    actualizarComboBox();
                }

                @Override
                public void changedUpdate(DocumentEvent e) {
                  
                }
        });
           
        } catch (IOException ex) {
            Logger.getLogger(Moverpaciente.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Paciente");

        jLabel2.setText("Nombre paciente");

        jLabel4.setText("Urgencia actual");

        jLabel5.setText("Cambiar a");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jButton1.setText("Volver");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Mover");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Dar de baja");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton1)
                        .addComponent(jLabel4)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addGap(37, 37, 37)
                        .addComponent(jButton2)))
                .addGap(84, 84, 84))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Menu men = new Menu();
        men.setVisible(true);
        men.setLocationRelativeTo(null);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    // TODO add your handling code here:

    String pacienteSeleccionado = jComboBox1.getSelectedItem().toString();
    
    long dniPacienteSeleccionado = Long.parseLong(pacienteSeleccionado);

    String nuevoTipoUrgencia = jComboBox2.getSelectedItem().toString();

    List<String> lineasActualizadas = new ArrayList<>();


    try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
        String linea;
        while ((linea = br.readLine()) != null) {
            String[] datos = linea.split(";");
            if (datos.length >= 7) { 
                long dni = Long.parseLong(datos[6]);
                if (dni == dniPacienteSeleccionado) {

                    datos[1] = nuevoTipoUrgencia;
                }
                
                lineasActualizadas.add(String.join(";", datos));
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }


    try (BufferedWriter writer = new BufferedWriter(new FileWriter(archivo))) {
        for (String linea : lineasActualizadas) {
            writer.write(linea);
            writer.newLine();
        }
    } catch (IOException e) {
        e.printStackTrace();
    }

    JOptionPane.showMessageDialog(this, "Paciente movido con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here
        String dniSeleccionado = jComboBox1.getSelectedItem().toString();
        int idTriage = encontrarIdPorDni(dniSeleccionado);


        

        for (Triage triage : gestorTriage.getTriages()) {
            if (triage.getId_triage() == idTriage) {
                gestorTriage.eliminar(idTriage);
                gestorTriage.escribirArchivo(archivo, ";", false);
                try {
                    gestorTriage.leerArchivo(archivo, ";");
                } catch (IOException ex) {
                    Logger.getLogger(Moverpaciente.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
        }
        
        System.out.println("el id encontrado fue " + idTriage );

        
    }//GEN-LAST:event_jButton3ActionPerformed
   
    
    private int encontrarIdPorDni(String dniSeleccionado) {

        int idEncontrado = -1;
   
    try (BufferedReader brPacientes = new BufferedReader(new FileReader(archivo))) {
        String lineaPacientes;
        while ((lineaPacientes = brPacientes.readLine()) != null) {
            System.out.println("Línea leída del archivo: " + lineaPacientes);
            String[] datosPacientes = lineaPacientes.split(";");
            if (datosPacientes.length >= 7) {
                String dni = datosPacientes[6];
                int id = Integer.parseInt(datosPacientes[0]);
                if (dniSeleccionado.equalsIgnoreCase(dni)) { // Comparación sin distinguir mayúsculas/minúsculas
                    idEncontrado = id;
                    System.out.println("ID buscado: " + id);
                    break;
                }
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }

    return idEncontrado;
} 
    
    private void actualizarComboBox() {
        jComboBox2.removeAllItems();
        
        String urgenciaActual = jTextField2.getText();
                
        if ("Riesgo vital inmediato".equals(urgenciaActual)) {
            jComboBox2.addItem("Muy urgente");
            jComboBox2.addItem("Urgente");
            
        } else if ("Muy urgente".equals(urgenciaActual)) {
            jComboBox2.addItem("Riesgo vital inmediato");
            jComboBox2.addItem("Muy urgente");
            jComboBox2.addItem("Normal");
            
        } else if ("Urgente".equals(urgenciaActual)) {
            jComboBox2.addItem("Riesgo vital inmediato");
            jComboBox2.addItem("Muy urgente");
            jComboBox2.addItem("Normal");
            jComboBox2.addItem("No urgente");
        } else if ("Normal".equals(urgenciaActual)) {
            jComboBox2.addItem("Muy urgente");;
            jComboBox2.addItem("Urgente");;
            jComboBox2.addItem("No urgente");
        } else if ("No urgente".equals(urgenciaActual)) {
            jComboBox2.addItem("Urgente");
            jComboBox2.addItem("Normal");
        }
        
    }
    
    private void cargarPacientesDesdeArchivo(String archivo) throws IOException {
    BufferedReader br = null;
    try {
        br = new BufferedReader(new FileReader(archivo));
        String linea;
        while ((linea = br.readLine()) != null) {
            String[] datos = linea.split(";");
            
            if (datos.length >= 6) {
                String Dni = datos[6];
                
                // Agregar el nombre completo al ComboBox
                jComboBox1.addItem(Dni);
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        if (br != null) {
            br.close();
        }
    }
}                           
    
    private void cargarInformacionPaciente(){
        
        String paciente = jComboBox1.getSelectedItem().toString();
        
        String infoUrgencia = cargarUrgencia(paciente);
        String nombrePaciente = cargarNombrePaciente(paciente);
        
        jTextField2.setText(infoUrgencia);
        jTextField1.setText(nombrePaciente);
    }
    
    private String cargarUrgencia(String paciente){
        try (BufferedReader br = new BufferedReader(new FileReader("src\\main\\java\\com\\miapp\\triage\\csv\\triage.csv"))) {
        String linea;
        while ((linea = br.readLine()) != null) {
            String[] datos = linea.split(";");
            String urgencia = datos[6];
            if (urgencia.equals(paciente)) {

                return datos[1]; 
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
    

    return "Información no encontrada";
    }
    
    private String cargarNombrePaciente(String paciente){
        try (BufferedReader br = new BufferedReader(new FileReader("src\\main\\java\\com\\miapp\\triage\\csv\\triage.csv"))) {
        String linea;
        while ((linea = br.readLine()) != null) {
            String[] datos = linea.split(";");
            String dni = datos[6];
            if (dni.equals(paciente)) {

                return datos[5]; 
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
    

    return "Información no encontrada";
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Moverpaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Moverpaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Moverpaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Moverpaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Moverpaciente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
